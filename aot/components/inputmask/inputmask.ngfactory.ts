/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '../../../components/inputmask/inputmask';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '../../../components/inputtext/inputtext';
import * as import4 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/element';
import * as import10 from '../../../components/dom/domhandler';
import * as import11 from '@angular/core/src/linker/view_utils';
import * as import12 from '@angular/core/src/linker/view_type';
import * as import13 from '@angular/core/src/change_detection/change_detection';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/forms/src/directives/control_value_accessor';
import * as import16 from '@angular/core/src/metadata/view';
import * as import17 from '@angular/core/src/linker/component_factory';
import * as import18 from '@angular/common/src/directives/ng_class';
import * as import19 from '@angular/common/src/directives/ng_style';
import * as import20 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import21 from '@angular/core/src/change_detection/differs/keyvalue_differs';
class InputMaskModuleInjector extends import0.NgModuleInjector<import1.InputMaskModule> {
  _CommonModule_0:import2.CommonModule;
  _InputTextModule_1:import3.InputTextModule;
  _InputMaskModule_2:import1.InputMaskModule;
  __LOCALE_ID_3:any;
  __NgLocalization_4:import4.NgLocaleLocalization;
  __TRANSLATIONS_FORMAT_5:any;
  constructor(parent:import5.Injector) {
    super(parent,[],[]);
  }
  get _LOCALE_ID_3():any {
    if ((this.__LOCALE_ID_3 == (null as any))) { (this.__LOCALE_ID_3 = (null as any)); }
    return this.__LOCALE_ID_3;
  }
  get _NgLocalization_4():import4.NgLocaleLocalization {
    if ((this.__NgLocalization_4 == (null as any))) { (this.__NgLocalization_4 = new import4.NgLocaleLocalization(this._LOCALE_ID_3)); }
    return this.__NgLocalization_4;
  }
  get _TRANSLATIONS_FORMAT_5():any {
    if ((this.__TRANSLATIONS_FORMAT_5 == (null as any))) { (this.__TRANSLATIONS_FORMAT_5 = (null as any)); }
    return this.__TRANSLATIONS_FORMAT_5;
  }
  createInternal():import1.InputMaskModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._InputTextModule_1 = new import3.InputTextModule();
    this._InputMaskModule_2 = new import1.InputMaskModule();
    return this._InputMaskModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.InputTextModule)) { return this._InputTextModule_1; }
    if ((token === import1.InputMaskModule)) { return this._InputMaskModule_2; }
    if ((token === import6.LOCALE_ID)) { return this._LOCALE_ID_3; }
    if ((token === import4.NgLocalization)) { return this._NgLocalization_4; }
    if ((token === import6.TRANSLATIONS_FORMAT)) { return this._TRANSLATIONS_FORMAT_5; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const InputMaskModuleNgFactory:import0.NgModuleFactory<import1.InputMaskModule> = new import0.NgModuleFactory(InputMaskModuleInjector,import1.InputMaskModule);
var renderType_InputMask_Host:import7.RenderComponentType = (null as any);
class _View_InputMask_Host0 extends import8.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import9.AppElement;
  _DomHandler_0_4:import10.DomHandler;
  _InputMask_0_5:import1.InputMask;
  __NG_VALUE_ACCESSOR_0_6:any[];
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(viewUtils:import11.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_InputMask_Host0,renderType_InputMask_Host,import12.ViewType.HOST,viewUtils,parentInjector,declarationEl,import13.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_6():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_6 == (null as any))) { (this.__NG_VALUE_ACCESSOR_0_6 = [this._InputMask_0_5]); }
    return this.__NG_VALUE_ACCESSOR_0_6;
  }
  createInternal(rootSelector:string):import9.AppElement {
    this._el_0 = this.selectOrCreateHostElement('p-inputMask',rootSelector,(null as any));
    this._appEl_0 = new import9.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_InputMask0(this.viewUtils,this.injector(0),this._appEl_0);
    this._DomHandler_0_4 = new import10.DomHandler();
    this._InputMask_0_5 = new import1.InputMask(new import14.ElementRef(this._el_0),this._DomHandler_0_4);
    this._appEl_0.initComponent(this._InputMask_0_5,[],compView_0);
    compView_0.create(this._InputMask_0_5,this.projectableNodes,(null as any));
    this._expr_0 = import13.UNINITIALIZED;
    this._expr_1 = import13.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.DomHandler) && (0 === requestNodeIndex))) { return this._DomHandler_0_4; }
    if (((token === import1.InputMask) && (0 === requestNodeIndex))) { return this._InputMask_0_5; }
    if (((token === import15.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_0:any = this._InputMask_0_5.filled;
    if (import11.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'ui-inputwrapper-filled',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._InputMask_0_5.focus;
    if (import11.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'ui-inputwrapper-focus',currVal_1);
      this._expr_1 = currVal_1;
    }
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._InputMask_0_5.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this._InputMask_0_5.ngOnDestroy();
  }
}
function viewFactory_InputMask_Host0(viewUtils:import11.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<any> {
  if ((renderType_InputMask_Host === (null as any))) { (renderType_InputMask_Host = viewUtils.createRenderComponentType('',0,import16.ViewEncapsulation.None,[],{})); }
  return new _View_InputMask_Host0(viewUtils,parentInjector,declarationEl);
}
export const InputMaskNgFactory:import17.ComponentFactory<import1.InputMask> = new import17.ComponentFactory<import1.InputMask>('p-inputMask',viewFactory_InputMask_Host0,import1.InputMask);
const styles_InputMask:any[] = [];
var renderType_InputMask:import7.RenderComponentType = (null as any);
class _View_InputMask0 extends import8.AppView<import1.InputMask> {
  _el_0:any;
  _NgClass_0_3:import18.NgClass;
  _NgStyle_0_4:import19.NgStyle;
  _InputText_0_5:import3.InputText;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  constructor(viewUtils:import11.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement) {
    super(_View_InputMask0,renderType_InputMask,import12.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import13.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import9.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'input',(null as any));
    this.renderer.setElementAttribute(this._el_0,'pInputText','');
    this.renderer.setElementAttribute(this._el_0,'type','text');
    this._NgClass_0_3 = new import18.NgClass(this.parentInjector.get(import20.IterableDiffers),this.parentInjector.get(import21.KeyValueDiffers),new import14.ElementRef(this._el_0),this.renderer);
    this._NgStyle_0_4 = new import19.NgStyle(this.parentInjector.get(import21.KeyValueDiffers),new import14.ElementRef(this._el_0),this.renderer);
    this._InputText_0_5 = new import3.InputText(new import14.ElementRef(this._el_0));
    this._expr_10 = import13.UNINITIALIZED;
    this._expr_11 = import13.UNINITIALIZED;
    this._expr_12 = import13.UNINITIALIZED;
    this._expr_13 = import13.UNINITIALIZED;
    this._expr_14 = import13.UNINITIALIZED;
    this._expr_15 = import13.UNINITIALIZED;
    this._expr_16 = import13.UNINITIALIZED;
    this._expr_17 = import13.UNINITIALIZED;
    var disposable_0:Function = this.renderer.listen(this._el_0,'focus',this.eventHandler(this._handle_focus_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'blur',this.eventHandler(this._handle_blur_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'keydown',this.eventHandler(this._handle_keydown_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'keypress',this.eventHandler(this._handle_keypress_0_3.bind(this)));
    var disposable_4:Function = this.renderer.listen(this._el_0,'input',this.eventHandler(this._handle_input_0_4.bind(this)));
    var disposable_5:Function = this.renderer.listen(this._el_0,'paste',this.eventHandler(this._handle_paste_0_5.bind(this)));
    var disposable_6:Function = this.renderer.listen(this._el_0,'mouseover',this.eventHandler(this._handle_mouseover_0_6.bind(this)));
    var disposable_7:Function = this.renderer.listen(this._el_0,'mouseout',this.eventHandler(this._handle_mouseout_0_7.bind(this)));
    this._expr_18 = import13.UNINITIALIZED;
    this._expr_19 = import13.UNINITIALIZED;
    this._expr_20 = import13.UNINITIALIZED;
    this._expr_21 = import13.UNINITIALIZED;
    this._expr_22 = import13.UNINITIALIZED;
    this._expr_23 = import13.UNINITIALIZED;
    this._expr_24 = import13.UNINITIALIZED;
    this._expr_25 = import13.UNINITIALIZED;
    this._expr_26 = import13.UNINITIALIZED;
    this._expr_27 = import13.UNINITIALIZED;
    this.init([],[this._el_0],[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3,
      disposable_4,
      disposable_5,
      disposable_6,
      disposable_7
    ]
    ,[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3; }
    if (((token === import19.NgStyle) && (0 === requestNodeIndex))) { return this._NgStyle_0_4; }
    if (((token === import3.InputText) && (0 === requestNodeIndex))) { return this._InputText_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_18:any = this.context.styleClass;
    if (import11.checkBinding(throwOnChange,this._expr_18,currVal_18)) {
      this._NgClass_0_3.ngClass = currVal_18;
      this._expr_18 = currVal_18;
    }
    if (!throwOnChange) { this._NgClass_0_3.ngDoCheck(); }
    const currVal_19:any = this.context.style;
    if (import11.checkBinding(throwOnChange,this._expr_19,currVal_19)) {
      this._NgStyle_0_4.ngStyle = currVal_19;
      this._expr_19 = currVal_19;
    }
    if (!throwOnChange) { this._NgStyle_0_4.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    const currVal_10:any = this.context.name;
    if (import11.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementProperty(this._el_0,'name',currVal_10);
      this._expr_10 = currVal_10;
    }
    const currVal_11:any = (this.context.value || '');
    if (import11.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_0,'value',currVal_11);
      this._expr_11 = currVal_11;
    }
    const currVal_12:any = this.context.placeholder;
    if (import11.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_0,'placeholder',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this.context.size;
    if (import11.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementAttribute(this._el_0,'size',((currVal_13 == (null as any))? (null as any): currVal_13.toString()));
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = this.context.maxlength;
    if (import11.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementAttribute(this._el_0,'maxlength',((currVal_14 == (null as any))? (null as any): currVal_14.toString()));
      this._expr_14 = currVal_14;
    }
    const currVal_15:any = this.context.tabindex;
    if (import11.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setElementAttribute(this._el_0,'tabindex',((currVal_15 == (null as any))? (null as any): currVal_15.toString()));
      this._expr_15 = currVal_15;
    }
    const currVal_16:any = this.context.disabled;
    if (import11.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      this.renderer.setElementProperty(this._el_0,'disabled',currVal_16);
      this._expr_16 = currVal_16;
    }
    const currVal_17:any = this.context.readonly;
    if (import11.checkBinding(throwOnChange,this._expr_17,currVal_17)) {
      this.renderer.setElementProperty(this._el_0,'readOnly',currVal_17);
      this._expr_17 = currVal_17;
    }
    const currVal_20:any = true;
    if (import11.checkBinding(throwOnChange,this._expr_20,currVal_20)) {
      this.renderer.setElementClass(this._el_0,'ui-inputtext',currVal_20);
      this._expr_20 = currVal_20;
    }
    const currVal_21:any = true;
    if (import11.checkBinding(throwOnChange,this._expr_21,currVal_21)) {
      this.renderer.setElementClass(this._el_0,'ui-corner-all',currVal_21);
      this._expr_21 = currVal_21;
    }
    const currVal_22:any = true;
    if (import11.checkBinding(throwOnChange,this._expr_22,currVal_22)) {
      this.renderer.setElementClass(this._el_0,'ui-state-default',currVal_22);
      this._expr_22 = currVal_22;
    }
    const currVal_23:any = true;
    if (import11.checkBinding(throwOnChange,this._expr_23,currVal_23)) {
      this.renderer.setElementClass(this._el_0,'ui-widget',currVal_23);
      this._expr_23 = currVal_23;
    }
    const currVal_24:any = this._InputText_0_5.hover;
    if (import11.checkBinding(throwOnChange,this._expr_24,currVal_24)) {
      this.renderer.setElementClass(this._el_0,'ui-state-hover',currVal_24);
      this._expr_24 = currVal_24;
    }
    const currVal_25:any = this._InputText_0_5.focus;
    if (import11.checkBinding(throwOnChange,this._expr_25,currVal_25)) {
      this.renderer.setElementClass(this._el_0,'ui-state-focus',currVal_25);
      this._expr_25 = currVal_25;
    }
    const currVal_26:any = this._InputText_0_5.disabled;
    if (import11.checkBinding(throwOnChange,this._expr_26,currVal_26)) {
      this.renderer.setElementClass(this._el_0,'ui-state-disabled',currVal_26);
      this._expr_26 = currVal_26;
    }
    const currVal_27:any = this._InputText_0_5.filled;
    if (import11.checkBinding(throwOnChange,this._expr_27,currVal_27)) {
      this.renderer.setElementClass(this._el_0,'ui-state-filled',currVal_27);
      this._expr_27 = currVal_27;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  private _handle_focus_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onFocus($event)) !== false);
    const pd_1:any = ((<any>this._InputText_0_5.onFocus($event)) !== false);
    return ((true && pd_0) && pd_1);
  }
  private _handle_blur_0_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onBlur($event)) !== false);
    const pd_1:any = ((<any>this._InputText_0_5.onBlur($event)) !== false);
    return ((true && pd_0) && pd_1);
  }
  private _handle_keydown_0_2($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onKeyDown($event)) !== false);
    return (true && pd_0);
  }
  private _handle_keypress_0_3($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onKeyPress($event)) !== false);
    return (true && pd_0);
  }
  private _handle_input_0_4($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onInput($event)) !== false);
    return (true && pd_0);
  }
  private _handle_paste_0_5($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.handleInputChange($event)) !== false);
    return (true && pd_0);
  }
  private _handle_mouseover_0_6($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._InputText_0_5.onMouseover($event)) !== false);
    return (true && pd_0);
  }
  private _handle_mouseout_0_7($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this._InputText_0_5.onMouseout($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_InputMask0(viewUtils:import11.ViewUtils,parentInjector:import5.Injector,declarationEl:import9.AppElement):import8.AppView<import1.InputMask> {
  if ((renderType_InputMask === (null as any))) { (renderType_InputMask = viewUtils.createRenderComponentType('c:/Users/eirwn/Documents/primeng-min/components/inputmask/inputmask.ts class InputMask - inline template',0,import16.ViewEncapsulation.None,styles_InputMask,{})); }
  return new _View_InputMask0(viewUtils,parentInjector,declarationEl);
}